{"version":3,"sources":["app/components/SearchBar.tsx","app/components/JobDesc.tsx","app/components/JobListingComp/JobList/Job.tsx","app/components/JobListingComp/JobList/JobListHeader.tsx","app/components/JobListingComp/JobList.tsx","app/components/JobListing.tsx","app/components/SourceCode.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["SearchBar","props","className","value","jobsTitle","style","width","options","titleOptions","placeholder","filterOption","inputValue","option","toUpperCase","indexOf","onChange","e","onJobTitleChange","AutocompleteTitles","jobsLoc","countryOptions","onJobLocChange","AutocompleteCountries","onClick","JobDesc","selectedJob","title","description","Job","job","company","citiesNames","cities","map","city","name","country","millisNow","Date","getTime","millisThen","createdAt","secondsSinceThen","Math","round","createdAgo","selected","onSelectedJobIdChange","id","href","websiteUrl","JobListHeader","jobsInfo","txt","resumenTexto","orderBy","onSetOrderByChange","JobList","useState","setOrderBy","jobComps","orderFunc","a","b","jobs","sort","selectedBool","push","newOrderBy","quantity","length","JobListing","selectedJobId","setSelectedJobId","data","count","find","newSelectedJobId","SourceCode","target","rel","GithubOutlined","fontSize","client","ApolloClient","uri","JobsQuery","query","gql","result","loading","error","SyncOutlined","spin","allTitles","jobsTitles","filter","index","findIndex","t","allCountries","countries","jobsCountries","handleJobTitleChange","handleJobLocChange","App","setJobsTitle","setJobsLoc","newJobLoc","newJobTitle","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e3b394b7.chunk.js","sourcesContent":["import 'antd/dist/antd.css';\r\nimport { AutoComplete, Button } from 'antd';\r\nimport {JobInfoInterface} from \"../interfaces/jobInterfaces\"\r\n\r\ninterface Props extends JobInfoInterface{\r\n  titleOptions: {value: string}[]\r\n  countryOptions: {value: string}[]\r\n  onJobTitleChange:(val: string)=>void\r\n  onJobLocChange:(val: string)=>void\r\n}\r\n\r\nconst SearchBar = (props: Props): JSX.Element => {\r\n\r\n  const AutocompleteTitles = (props: Props) => (\r\n    <AutoComplete\r\n      value={props.jobsTitle}\r\n      style={{\r\n        width: \"100%\",\r\n      }}\r\n      options={props.titleOptions}\r\n      placeholder=\"Title\"\r\n      filterOption={(inputValue, option) =>\r\n        option!.value.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1\r\n      }\r\n      onChange={(e)=>props.onJobTitleChange(e)}\r\n    />\r\n  );\r\n  const AutocompleteCountries = (props: Props) => (\r\n    <AutoComplete\r\n      value={props.jobsLoc}\r\n      style={{\r\n        width: \"100%\",\r\n      }}\r\n      options={props.countryOptions}\r\n      placeholder=\"Country\"\r\n      filterOption={(inputValue, option) =>\r\n        option!.value!.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1\r\n      }\r\n      onChange={(e)=>props.onJobLocChange(e)}\r\n    />\r\n  );\r\n\r\n  return(\r\n    <div className=\"SearchBar\">\r\n      {AutocompleteTitles(props)}\r\n      {AutocompleteCountries(props)}\r\n      <Button onClick={()=>{props.onJobLocChange(\"\");props.onJobTitleChange(\"\")}}>Clear search</Button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SearchBar","import ReactMarkdown from 'react-markdown'\r\nimport {JobInterface} from \"../interfaces/jobInterfaces\"\r\n\r\ninterface Props {\r\n  selectedJob: JobInterface\r\n}\r\n\r\nconst JobDesc = (props: Props): JSX.Element => {\r\n  return(\r\n    <div className={`JobDesc ${props.selectedJob ? \"\" : \"empty\"}`}>\r\n      <h1>{props.selectedJob ? props.selectedJob.title : \"Seleccione un trabajo\"}</h1>\r\n      <p><ReactMarkdown>{props.selectedJob ? props.selectedJob.description : \"\"}</ReactMarkdown></p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default JobDesc","import {JobInterface, CityInterface} from \"../../../interfaces/jobInterfaces\"\r\n\r\ninterface Props {\r\n  job: JobInterface\r\n  onSelectedJobIdChange: (jobId: string)=>any;\r\n  selected: boolean\r\n}\r\n\r\nconst Job = (props: Props): JSX.Element => {\r\n  const job = props.job\r\n  const company = job.company\r\n\r\n  var citiesNames: string = \"\"\r\n  job.cities.map((city: CityInterface) => {\r\n    citiesNames += `${city.name}, ${city.country.name}. `\r\n    return city\r\n  })\r\n\r\n  const millisNow: number = new Date().getTime()\r\n  const millisThen: number = new Date(job.createdAt).getTime()\r\n  const secondsSinceThen: number = Math.round((millisNow - millisThen)/1000)\r\n    \r\n  var createdAgo: string = \"\"\r\n  if(secondsSinceThen < 1){\r\n    createdAgo = \"just now\"\r\n  } else if(secondsSinceThen < 60){\r\n    createdAgo = `${secondsSinceThen} seconds ago`\r\n  } else if(secondsSinceThen < 60*60){\r\n    createdAgo = `${Math.round(secondsSinceThen/(60))} minutes ago`\r\n  } else if(secondsSinceThen < 60*60*24){\r\n    createdAgo = `${Math.round(secondsSinceThen/(60*60))} hours ago`\r\n  } else if(secondsSinceThen < 60*60*24*30){\r\n    createdAgo = `${Math.round(secondsSinceThen/(60*60*24))} days ago`\r\n  } else if(secondsSinceThen < 60*60*24*365){\r\n    createdAgo = `${Math.round(secondsSinceThen/(60*60*24*30))} months ago`\r\n  } else {\r\n    createdAgo = `${Math.round(secondsSinceThen/(60*60*24*365))} years ago`\r\n  }\r\n\r\n  return(\r\n    <div className={`Job ${props.selected ? \"selected\" : \"\"}`} onClick={()=>{props.onSelectedJobIdChange(job.id)}}>\r\n      <h3>{job.title}</h3>\r\n      <h3 className=\"subtitle\"><a href={company.websiteUrl}>{company.name}</a></h3>\r\n      <h3 className=\"subtitle\">{citiesNames}</h3>\r\n      <p className=\"jobDate\">{createdAgo}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Job","import {JobInfoInterface} from \"../../../interfaces/jobInterfaces\"\r\n\r\n\r\ninterface Props {\r\n  onSetOrderByChange: (order: string)=>void;\r\n  orderBy: string\r\n  quantity: number\r\n  jobsInfo: JobInfoInterface\r\n}\r\n\r\nconst JobListHeader = (props: Props): JSX.Element=> {\r\n  \r\n  const jobsLoc = props.jobsInfo.jobsLoc\r\n  const jobsTitle = props.jobsInfo.jobsTitle\r\n  const resumenTexto = () => {\r\n    let txt: string = \"\"\r\n    if(jobsLoc || jobsTitle){\r\n      txt += \"Empleos\"\r\n      if(jobsTitle){\r\n        txt += \" de \" + jobsTitle\r\n      }\r\n      if(jobsLoc){\r\n        txt += \" en \" + jobsLoc\r\n      }\r\n    }\r\n    return txt\r\n  }\r\n  return(\r\n    <div className=\"JobListHeader\">\r\n      <p className=\"subtitle\">{resumenTexto()}</p>\r\n      <p className=\"order\">\r\n        {\"Ordenar por: \"} \r\n        <button className={props.orderBy === \"title\" ? \"active\" : \"\"} onClick={()=>props.onSetOrderByChange(\"title\")}>nombre</button>\r\n        {\" - \"} \r\n        <button className={props.orderBy === \"date\" ? \"active\" : \"\"} onClick={()=>props.onSetOrderByChange(\"date\")}>fecha</button>\r\n      </p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default JobListHeader","import {useState} from 'react';\r\nimport Job from './JobList/Job'\r\nimport JobListHeader from './JobList/JobListHeader'\r\nimport {JobInterface, JobInfoInterface} from \"../../interfaces/jobInterfaces\"\r\n\r\ninterface Props {\r\n  onSelectedJobIdChange: (jobId: string)=>any;\r\n  jobs: JobInterface[]\r\n  jobsInfo: JobInfoInterface\r\n  selectedJob: {\r\n    id: string\r\n  } \r\n}\r\n\r\nconst JobList = (props: Props): JSX.Element => {\r\n  const [orderBy, setOrderBy] = useState(\"title\")\r\n\r\n  const handleSetOrderByChange = (newOrderBy: string): void => {\r\n    setOrderBy(newOrderBy)\r\n  }\r\n\r\n  const jobComps: JSX.Element[] = []\r\n\r\n  var orderFunc = (a: JobInterface,b: JobInterface): number => {\r\n    return a.title > b.title ? 1 : -1\r\n  }\r\n\r\n  switch(orderBy){\r\n    case \"title\":\r\n      orderFunc = (a,b) => {\r\n        return a.title > b.title ? 1 : -1\r\n      }\r\n      break\r\n    case \"date\":\r\n      orderFunc = (a,b) => {\r\n        return a.createdAt < b.createdAt ? 1 : -1\r\n      }\r\n  }\r\n\r\n  props.jobs.sort((a: JobInterface,b: JobInterface) => orderFunc(a,b))\r\n\r\n  var selectedBool: boolean = false\r\n\r\n  props.jobs.map((job: JobInterface) => {\r\n    if(props.selectedJob){\r\n      selectedBool = (job.id === props.selectedJob.id)\r\n    }\r\n    jobComps.push(\r\n      <Job key={job.id} onSelectedJobIdChange={props.onSelectedJobIdChange} job={job} selected={selectedBool}/>\r\n    )\r\n    return job\r\n  })\r\n\r\n  return(\r\n    <div className=\"jobList\">\r\n      <JobListHeader onSetOrderByChange={handleSetOrderByChange} orderBy={orderBy} quantity={props.jobs.length} jobsInfo={props.jobsInfo}/>\r\n      {jobComps}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default JobList","import {useState} from 'react';\r\nimport JobDesc from './JobDesc'\r\nimport JobList from './JobListingComp/JobList'\r\nimport {JobInterface, JobInfoInterface, CityInterface} from \"../interfaces/jobInterfaces\"\r\n\r\ninterface Props extends JobInfoInterface{\r\n  data:{\r\n    jobs: JobInterface[]\r\n  }\r\n}\r\n\r\nconst JobListing = (props: Props): JSX.Element => {\r\n\r\n  const [selectedJobId, setSelectedJobId] = useState(\"\")\r\n  \r\n  const handleSelectedJobIdChange = (newSelectedJobId: string): void => {\r\n    setSelectedJobId(newSelectedJobId)\r\n  }\r\n\r\n  const jobs: JobInterface[] = []\r\n  \r\n  props.data.jobs.map((job: JobInterface) => {\r\n    if(job.title.toUpperCase().indexOf(props.jobsTitle.toUpperCase()) === -1){\r\n      return job\r\n    }\r\n    let count = 0\r\n    job.cities.map((city: CityInterface) => {\r\n      if(city.country.name.toUpperCase().indexOf(props.jobsLoc.toUpperCase()) >= 0){\r\n        count++\r\n      }\r\n      return city\r\n    })\r\n    if(count === 0){\r\n      return job\r\n    }\r\n    jobs.push(job)\r\n    return job\r\n  })\r\n\r\n  const selectedJob: JobInterface = jobs.find(job => job.id === selectedJobId)!\r\n\r\n  const jobsInfo: JobInfoInterface = {\r\n    jobsLoc:    props.jobsLoc,\r\n    jobsTitle:  props.jobsTitle\r\n  }\r\n\r\n  return(\r\n    <div className=\"JobListing\">\r\n      <JobList jobs={jobs} onSelectedJobIdChange={handleSelectedJobIdChange} jobsInfo={jobsInfo} selectedJob={selectedJob}/>\r\n      <JobDesc selectedJob={selectedJob}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default JobListing","import { GithubOutlined } from \"@ant-design/icons\"\r\n\r\nconst SourceCode = (): JSX.Element => {\r\n  return(\r\n    <div className=\"SourceCode\">\r\n      <a target=\"_blank\" rel=\"noreferrer\" href=\"https://github.com/jeronimoek/search-jobs-react-app\">\r\n        <GithubOutlined style={{fontSize:70}}/>\r\n      </a>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SourceCode","import {useState} from 'react';\r\nimport './App.scss';\r\nimport SearchBar from './app/components/SearchBar'\r\nimport JobListing from './app/components/JobListing'\r\nimport ApolloClient, { gql, OperationVariables }from 'apollo-boost';\r\nimport { ApolloProvider, Query, QueryResult } from 'react-apollo';\r\nimport { SyncOutlined } from '@ant-design/icons';\r\nimport {JobInterface ,JobInfoInterface} from \"./app/interfaces/jobInterfaces\"\r\nimport SourceCode from './app/components/SourceCode';\r\n\r\ninterface Props extends JobInfoInterface{\r\n  handleJobTitleChange:(val: string)=>void\r\n  handleJobLocChange:(val: string)=>void\r\n}\r\n\r\nconst client = new ApolloClient({\r\n  uri: \"https://api.graphql.jobs/\"\r\n})\r\n\r\nconst JobsQuery = (props: Props): JSX.Element => {\r\n  return <Query query={\r\n    gql`{\r\n      countries{\r\n        name\r\n      }\r\n      jobs{\r\n        id\r\n        title\r\n        description\r\n        commitment{\r\n          title\r\n        }\r\n        cities{\r\n          name\r\n          country{\r\n            name\r\n          }\r\n        }\r\n        company{\r\n          name\r\n          websiteUrl\r\n        }\r\n        applyUrl\r\n        createdAt\r\n      }\r\n    }`\r\n  }>\r\n  {\r\n    ((result: QueryResult<any, OperationVariables>) => {\r\n      const {loading,error,data} = result\r\n      if(loading) return(\r\n        <div className=\"loading\">\r\n          <SyncOutlined spin /> \r\n        </div> \r\n      )\r\n      if(error) return <p>Error!</p>\r\n\r\n      const allTitles: {value: string}[] = data.jobs.map((job: JobInterface) => {return {value: job.title}})\r\n      const jobsTitles = allTitles.filter((title, index) => (allTitles.findIndex(t => t.value.toUpperCase() === title.value.toUpperCase()) === index))\r\n\r\n      const allCountries: {value: string}[] = data.countries.map((country: {name: string}) => {return {value: country.name}})\r\n      const jobsCountries = allCountries.filter((country, index) => (allCountries.findIndex(t => t.value.toUpperCase() === country.value.toUpperCase()) === index))\r\n\r\n      return(\r\n        <div>\r\n          <SearchBar\r\n            titleOptions={jobsTitles}\r\n            countryOptions={jobsCountries}\r\n            jobsTitle={props.jobsTitle}\r\n            jobsLoc={props.jobsLoc}\r\n            onJobTitleChange={props.handleJobTitleChange}\r\n            onJobLocChange={props.handleJobLocChange}\r\n          />\r\n          <hr/>\r\n          <JobListing\r\n            jobsTitle={props.jobsTitle}\r\n            jobsLoc={props.jobsLoc}\r\n            data={data}\r\n          />\r\n          <SourceCode/>\r\n        </div>\r\n      )\r\n    })\r\n  }\r\n  </Query>\r\n}\r\n\r\nconst App = (): JSX.Element => {\r\n  const [jobsTitle, setJobsTitle] = useState(\"\")\r\n  const [jobsLoc, setJobsLoc] = useState(\"\")\r\n\r\n  const handleJobTitleChange = (newJobTitle: string):void => {\r\n    setJobsTitle(newJobTitle)\r\n  }\r\n\r\n  const handleJobLocChange = (newJobLoc: string):void => {\r\n    setJobsLoc(newJobLoc)\r\n  }\r\n\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <div className=\"App\">\r\n        <JobsQuery \r\n          handleJobLocChange={handleJobLocChange} \r\n          handleJobTitleChange={handleJobTitleChange}\r\n          jobsTitle={jobsTitle}\r\n          jobsLoc={jobsLoc}\r\n        />\r\n      </div>\r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}